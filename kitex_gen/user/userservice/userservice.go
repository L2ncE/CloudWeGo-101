// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	user "github.com/L2ncE/CloudWeGo-101/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Login":         kitex.NewMethodInfo(loginHandler, newUserServiceLoginArgs, newUserServiceLoginResult, false),
		"Register":      kitex.NewMethodInfo(registerHandler, newUserServiceRegisterArgs, newUserServiceRegisterResult, false),
		"GetArticleNum": kitex.NewMethodInfo(getArticleNumHandler, newUserServiceGetArticleNumArgs, newUserServiceGetArticleNumResult, false),
		"AddArticleNum": kitex.NewMethodInfo(addArticleNumHandler, newUserServiceAddArticleNumArgs, newUserServiceAddArticleNumResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginArgs)
	realResult := result.(*user.UserServiceLoginResult)
	success, err := handler.(user.UserService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return user.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return user.NewUserServiceLoginResult()
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRegisterArgs)
	realResult := result.(*user.UserServiceRegisterResult)
	success, err := handler.(user.UserService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterArgs() interface{} {
	return user.NewUserServiceRegisterArgs()
}

func newUserServiceRegisterResult() interface{} {
	return user.NewUserServiceRegisterResult()
}

func getArticleNumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetArticleNumArgs)
	realResult := result.(*user.UserServiceGetArticleNumResult)
	success, err := handler.(user.UserService).GetArticleNum(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetArticleNumArgs() interface{} {
	return user.NewUserServiceGetArticleNumArgs()
}

func newUserServiceGetArticleNumResult() interface{} {
	return user.NewUserServiceGetArticleNumResult()
}

func addArticleNumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceAddArticleNumArgs)
	realResult := result.(*user.UserServiceAddArticleNumResult)
	success, err := handler.(user.UserService).AddArticleNum(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceAddArticleNumArgs() interface{} {
	return user.NewUserServiceAddArticleNumArgs()
}

func newUserServiceAddArticleNumResult() interface{} {
	return user.NewUserServiceAddArticleNumResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args user.UserServiceLoginArgs
	_args.Req = req
	var _result user.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Register(ctx context.Context, req *user.RegisterRequest) (r *user.ResgisterResponse, err error) {
	var _args user.UserServiceRegisterArgs
	_args.Req = req
	var _result user.UserServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetArticleNum(ctx context.Context, req *user.GetArticleNumRequest) (r *user.GetArticleNumResponse, err error) {
	var _args user.UserServiceGetArticleNumArgs
	_args.Req = req
	var _result user.UserServiceGetArticleNumResult
	if err = p.c.Call(ctx, "GetArticleNum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddArticleNum(ctx context.Context, req *user.AddArticleNumRequest) (r *user.AddArticleNumResponse, err error) {
	var _args user.UserServiceAddArticleNumArgs
	_args.Req = req
	var _result user.UserServiceAddArticleNumResult
	if err = p.c.Call(ctx, "AddArticleNum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
