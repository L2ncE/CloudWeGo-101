// Code generated by hertz generator.

package api

import (
	"context"
	"errors"
	"time"

	"github.com/L2ncE/CloudWeGo-101/api/biz/global"
	"github.com/L2ncE/CloudWeGo-101/api/biz/middleware"
	"github.com/L2ncE/CloudWeGo-101/api/biz/model/api"
	"github.com/L2ncE/CloudWeGo-101/kitex_gen/article"
	"github.com/L2ncE/CloudWeGo-101/kitex_gen/user"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/dgrijalva/jwt-go"
)

// Register .
// @router /user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.ResgisterResponse)

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := global.GlobalUserClient.Login(ctx, &user.LoginRequest{
		Username: req.Username,
		Password: req.Password,
	})

	j := middleware.NewJWT()
	claims := middleware.CustomClaims{
		ID: resp.Uid,
		StandardClaims: jwt.StandardClaims{
			NotBefore: time.Now().Unix(),
			ExpiresAt: time.Now().Unix() + 60*60*24*30,
			Issuer:    "L2ncE",
		},
	}
	token, err := j.CreateToken(claims)

	c.JSON(consts.StatusOK, &api.LoginResponse{Token: token})
}

// GetArticleNum .
// @router /user/article [GET]
func GetArticleNum(ctx context.Context, c *app.RequestContext) {
	aid, flag := c.Get("userId")
	if !flag {
		c.String(consts.StatusBadRequest, errors.New("wrong userid").Error())
		return
	}

	resp, err := global.GlobalUserClient.GetArticleNum(ctx, &user.GetArticleNumRequest{UserId: aid.(int64)})

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// AddArticleNum .
// @router /user/article [POST]
func AddArticleNum(ctx context.Context, c *app.RequestContext) {
	aid, flag := c.Get("userId")
	if !flag {
		c.String(consts.StatusBadRequest, errors.New("wrong userid").Error())
		return
	}

	resp, err := global.GlobalUserClient.AddArticleNum(ctx, &user.AddArticleNumRequest{UserId: aid.(int64)})

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PostArticle .
// @router article [POST]
func PostArticle(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PostArticleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	aid, flag := c.Get("userId")
	if !flag {
		c.String(consts.StatusBadRequest, errors.New("wrong userid").Error())
		return
	}

	resp, err := global.GlobalArticleClient.PostArticle(ctx, &article.PostArticleRequest{
		Title:   req.Title,
		Content: req.Content,
		Uid:     aid.(int64),
	})

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}
